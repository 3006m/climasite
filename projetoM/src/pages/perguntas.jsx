import { useState } from "react";
import "../styles/css.css";

export default function Perguntas() {
    const [opcao, setOpcao] = useState("Todas")

    const perguntas = [
        // Sensores e Hardware
        {
            pergunta: "O que √© o sensor DHT11?",
            resposta: "√â um sensor digital que mede temperatura e umidade e envia os dados ao ESP32 por um √∫nico pino.",
            categoria: "üì° Sensores e Hardware"
        },
        {
            pergunta: "Qual a fun√ß√£o do sensor MQ-135?",
            resposta: "Detecta gases t√≥xicos e avalia a qualidade do ar, enviando um valor anal√≥gico proporcional √† concentra√ß√£o.",
            categoria: "üì° Sensores e Hardware"
        },
        {
            pergunta: "Por que o DHT11 opera em 3V?",
            resposta: "Porque o ESP32 utiliza 3,3V em seus pinos GPIO, evitando risco de queima do microcontrolador.",
            categoria: "üì° Sensores e Hardware"
        },
        {
            pergunta: "O que acontece quando o MQ-135 √© exposto √† fuma√ßa?",
            resposta: "O valor anal√≥gico aumenta, indicando pior qualidade do ar; isso pode acionar LEDs de alerta.",
            categoria: "üì° Sensores e Hardware"
        },
        {
            pergunta: "Por que usamos LEDs no projeto?",
            resposta: "Os LEDs indicam condi√ß√µes como temperatura alta, baixa umidade ou presen√ßa de gases, facilitando a visualiza√ß√£o local.",
            categoria: "üì° Sensores e Hardware"
        },

        // ESP32 e Conex√µes
        {
            pergunta: "O que √© o ESP32?",
            resposta: "√â um microcontrolador com Wi-Fi e Bluetooth integrados, ideal para projetos de Internet das Coisas (IoT).",
            categoria: "‚öôÔ∏è ESP32 e Conex√µes"
        },
        {
            pergunta: "Como o ESP32 se conecta √† rede?",
            resposta: "Atrav√©s do m√≥dulo Wi-Fi interno, configurado no c√≥digo com o SSID e senha da rede local.",
            categoria: "‚öôÔ∏è ESP32 e Conex√µes"
        },
        {
            pergunta: "Qual a fun√ß√£o do pino anal√≥gico?",
            resposta: "Ler sinais vari√°veis de sensores como o MQ-135, convertendo-os em valores num√©ricos de 0 a 4095.",
            categoria: "‚öôÔ∏è ESP32 e Conex√µes"
        },
        {
            pergunta: "O que faz a fun√ß√£o setup()?",
            resposta: "√â executada uma vez no in√≠cio do c√≥digo, configurando os pinos, o Wi-Fi e o MQTT.",
            categoria: "‚öôÔ∏è ESP32 e Conex√µes"
        },
        {
            pergunta: "O que faz o loop()?",
            resposta: "Repete continuamente as leituras dos sensores, publica dados e atualiza o estado dos LEDs.",
            categoria: "‚öôÔ∏è ESP32 e Conex√µes"
        },

        // MQTT
        {
            pergunta: "O que √© o protocolo MQTT?",
            resposta: "√â um protocolo de comunica√ß√£o leve, usado para enviar e receber mensagens entre dispositivos IoT.",
            categoria: "üí¨ Comunica√ß√£o MQTT"
        },
        {
            pergunta: "O que √© o broker Mosquitto?",
            resposta: "√â o servidor intermedi√°rio que recebe os dados do ESP32 e os repassa aos clientes conectados.",
            categoria: "üí¨ Comunica√ß√£o MQTT"
        },
        {
            pergunta: "O que √© um t√≥pico MQTT?",
            resposta: "√â o canal de comunica√ß√£o onde os dados s√£o publicados e assinados, como 'estacao/manhattan/temperature'.",
            categoria: "üí¨ Comunica√ß√£o MQTT"
        },
        {
            pergunta: "O que significa publicar uma mensagem?",
            resposta: "Enviar dados de um dispositivo (publisher) para um t√≥pico no broker MQTT.",
            categoria: "üí¨ Comunica√ß√£o MQTT"
        },
        {
            pergunta: "O que √© um cliente MQTT?",
            resposta: "√â o aplicativo que envia ou recebe mensagens via MQTT ‚Äî pode ser o ESP32, um celular ou outro sistema.",
            categoria: "üí¨ Comunica√ß√£o MQTT"
        },

        // Software
        {
            pergunta: "Qual IDE foi usada no projeto?",
            resposta: "A IDE do Arduino, configurada com o pacote ESP32 e a sele√ß√£o da placa 'ESP32 Dev Module'.",
            categoria: "üíª Software e C√≥digo"
        },
        {
            pergunta: "Para que serve a biblioteca DHT.h?",
            resposta: "Faz a leitura da temperatura e da umidade diretamente do sensor DHT11.",
            categoria: "üíª Software e C√≥digo"
        },
        {
            pergunta: "Qual a fun√ß√£o da biblioteca PubSubClient.h?",
            resposta: "Gerencia a comunica√ß√£o MQTT entre o ESP32 e o broker Mosquitto.",
            categoria: "üíª Software e C√≥digo"
        },
        {
            pergunta: "Como garantir que o ESP32 reconecte ao MQTT?",
            resposta: "Criando uma fun√ß√£o reconnect_mqtt() que tenta reconectar sempre que a conex√£o cair.",
            categoria: "üíª Software e C√≥digo"
        },

        // Resultados
        {
            pergunta: "Como foi testado o sensor de g√°s?",
            resposta: "Aproximando fuma√ßa de f√≥sforo ou papel queimando, observando o aumento do valor lido no monitor serial.",
            categoria: "üåé Resultados e Aprendizados"
        },
        {
            pergunta: "O que aprendemos sobre integra√ß√£o IoT?",
            resposta: "Que sensores f√≠sicos podem interagir com sistemas digitais em tempo real usando protocolos de rede.",
            categoria: "üåé Resultados e Aprendizados"
        },
        {
            pergunta: "Qual foi o maior aprendizado do grupo?",
            resposta: "Compreender a import√¢ncia da comunica√ß√£o MQTT e do controle de hardware via software integrado.",
            categoria: "üåé Resultados e Aprendizados"
        }
    ];

    function Card({ pergunta, resposta, categoria, opcao }) {
        const [aberta, setAberta] = useState(false); // Cada card tem seu pr√≥prio estado
        const visivel = opcao === "Todos" || opcao === categoria;
        return (
            <div className="card"
                onClick={() => setAberta(!aberta)}
                style={{
                    display: visivel ? "block" : "none",
                    opacity: visivel ? 1 : 0,
                    transition: "opacity 0.3s ease"
                }}
            >
                <div className="pergunta"><strong>‚ùì {pergunta}</strong></div>
                {aberta && <div className="resposta">{resposta}</div>}
                <div className="categoria">{categoria}</div>
            </div>
        );
    }

    return (
        <>
            <section className="Page">
                <h2>Perguntas e Respostas</h2>
                <h3>Selecione uma op√ß√£o:</h3>
                <label>
                    opa
                    <select value={opcao} onChange={(e) => setOpcao(e.target.value)}>
                        <option value="üì° Sensores e Hardware">üì° Sensores e Hardware</option>
                        <option value="‚öôÔ∏è ESP32 e Conex√µes">‚öôÔ∏è ESP32 e Conex√µes</option>
                        <option value="üí¨ Comunica√ß√£o MQTT">üí¨ Comunica√ß√£o MQTT</option>
                        <option value="üíª Software e C√≥digo">üíª Software e C√≥digo</option>
                        <option value="üåé Resultados e Aprendizados">üåé Resultados e Aprendizados</option>
                    </select>
                </label>

                <p>Voc√™ escolheu: {opcao}</p>
                {perguntas.map((p, i) => (
                    <Card
                        key={i}
                        pergunta={p.pergunta}
                        resposta={p.resposta}
                        categoria={p.categoria}
                    />
                ))}
            </section>
        </>
    );
}
